using System;
using System.Linq;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Zhichkin.Metadata.Model;
using Zhichkin.ChangeTracking;
using Zhichkin.Integrator.Model;
using Zhichkin.ORM;

namespace Zhichkin.Integrator.Translator
{
    public sealed class ChangeTrackingRecordToSqlCommandAdapter : IMessageAdapter<ChangeTrackingMessage, SqlCommand>
    {
        private Subscription subscription = null;
        private ChangeTrackingMessage adaptee = null;
        private Dictionary<string, string> commands = null;
        private Dictionary<string, object> defaults = null;
        public ChangeTrackingRecordToSqlCommandAdapter() { }
        public IMessageAdapter<ChangeTrackingMessage, SqlCommand> Use(Subscription subscription)
        {
            if (subscription == null) throw new ArgumentNullException("subscription");
            this.subscription = subscription;
            return this;
        }
        public IMessageAdapter<ChangeTrackingMessage, SqlCommand> Input(ChangeTrackingMessage adaptee)
        {
            if (subscription == null) throw new ArgumentNullException("subscription");
            if (adaptee == null) throw new ArgumentNullException("adaptee");
            this.adaptee = adaptee;
            return this;
        }
        public void Output(SqlCommand target)
        {
            if (subscription == null) throw new ArgumentNullException("subscription");
            if (adaptee == null) throw new ArgumentNullException("adaptee");
            if (target == null) throw new ArgumentNullException("target");
            if (defaults == null) InitializeDefaultValues();
            if (commands == null) InitializeSQLCommands();
            target.CommandType = CommandType.Text;
            target.CommandText = commands[adaptee.SYS_CHANGE_OPERATION];
            target.Parameters.Clear();
            target.Parameters.Add(new SqlParameter()
            {
                Direction = ParameterDirection.Input,
                SqlDbType = SqlDbType.VarBinary, // varbinary(128)
                ParameterName = "change_tracking_context",
                Value = subscription.Publisher.Identity.ToByteArray()
            });
            for (int i = 0; i < adaptee.Fields.Length; i++)
            {
                ChangeTrackingField field = adaptee.Fields[i];
                if (adaptee.SYS_CHANGE_OPERATION == "D" && !field.IsKey) continue;
                object value = adaptee.Records[0].Values[i];
                target.Parameters.Add(new SqlParameter()
                {
                    Direction = ParameterDirection.Input,
                    SqlDbType = Helper.GetSqlTypeByName(field.Type),
                    ParameterName = field.Name,
                    Value = (value == null ? DBNull.Value : value)
                });
            }
            foreach (KeyValuePair<string, object> item in defaults)
            {
                // not null fields which are not included into translation rules
                target.Parameters.AddWithValue(item.Key, item.Value);
            }
        }
        private void InitializeSQLCommands()
        {
            commands = new Dictionary<string, string>()
            {
                { "I", string.Empty },
                { "U", string.Empty },
                { "D", string.Empty }
            };
            Table table = subscription.Subscriber.MainTable;
            BuildInsertCommand(table);
            BuildUpdateCommand(table);
            BuildDeleteCommand(table);
        }
        private bool IsAutoGeneratedValue(Field field)
        {
            return (field.TypeName == "timestamp" || field.TypeName == "rowversion");
        }
        private object GetDefaultValue(Field field)
        {
            if (field.TypeName == "numeric"
                || field.TypeName == "decimal"
                || field.TypeName == "smallmoney"
                || field.TypeName == "money")
            {
                return 0;
            }
            else if (field.TypeName == "bit")
            {
                return false;
            }
            else if (field.TypeName == "tinyint")
            {
                return (byte)0;
            }
            else if (field.TypeName == "smallint")
            {
                return (short)0;
            }
            else if (field.TypeName == "int")
            {
                return 0;
            }
            else if (field.TypeName == "bigint")
            {
                return (long)0;
            }
            else if (field.TypeName == "float"
                || field.TypeName == "real")
            {
                return 0D;
            }
            else if (field.TypeName == "datetime"
                || field.TypeName == "date"
                || field.TypeName == "time"
                || field.TypeName == "datetime2"
                || field.TypeName == "smalldatetime"
                || field.TypeName == "datetimeoffset")
            {
                return new DateTime(1980, 1, 1);
            }
            else if (field.TypeName == "char"
                || field.TypeName == "varchar"
                || field.TypeName == "nchar"
                || field.TypeName == "nvarchar"
                || field.TypeName == "text"
                || field.TypeName == "ntext")
            {
                return string.Empty;
            }
            else if (field.TypeName == "binary")
            {
                return new byte[field.Length];
            }
            else if (field.TypeName == "varbinary"
                || field.TypeName == "image")
            {
                return Guid.Empty.ToByteArray();
            }
            else if (field.TypeName == "timestamp"
                || field.TypeName == "rowversion")
            {
                return null; // the value is auto generated by database engine
            }
            else if (field.TypeName == "uniqueidentifier")
            {
                return Guid.Empty;
            }
            else
            {
                return null;
            }
        }
        private void InitializeDefaultValues()
        {
            defaults = new Dictionary<string, object>();
            foreach (Property property in subscription.Subscriber.Properties)
            {
                if (subscription.TranslationRules.Where((i) => i.TargetProperty == property).FirstOrDefault() == null)
                {
                    foreach (Field field in property.Fields)
                    {
                        if (field.IsNullable) continue;
                        if (IsAutoGeneratedValue(field)) continue;
                        defaults.Add(field.Name, GetDefaultValue(field));
                    }
                }
            }
        }
        private void BuildInsertCommand(Table target)
        {
            string insertSQL = "WITH CHANGE_TRACKING_CONTEXT (@change_tracking_context) INSERT {0} ({1}) VALUES ({2})";
            string fields = string.Empty;
            string values = string.Empty;
            string table = target.FullName;
            foreach (TranslationRule rule in subscription.TranslationRules)
            {
                foreach (Field field in rule.TargetProperty.Fields)
                {
                    if (IsAutoGeneratedValue(field)) continue;
                    fields += (fields == string.Empty ? string.Empty : ", ") + string.Format("[{0}]", field.Name);
                    values += (values == string.Empty ? string.Empty : ", ") + string.Format("@{0}", field.Name);
                }
            }
            foreach (KeyValuePair<string, object> rule in defaults)
            {
                string field_name = rule.Key;
                fields += (fields == string.Empty ? string.Empty : ", ") + string.Format("[{0}]", field_name);
                values += (values == string.Empty ? string.Empty : ", ") + string.Format("@{0}", field_name);
            }
            commands["I"] = string.Format(insertSQL, table, fields, values);
        }
        private void BuildUpdateCommand(Table target)
        {
            string updateSQL = "WITH CHANGE_TRACKING_CONTEXT (@change_tracking_context) UPDATE {0} SET {1} WHERE {2}";
            string key_value_pairs = string.Empty;
            string field_value_pairs = string.Empty;
            string table = target.FullName;
            foreach (TranslationRule rule in subscription.TranslationRules)
            {
                foreach (Field field in rule.TargetProperty.Fields)
                {
                    if (IsAutoGeneratedValue(field)) continue;
                    if (rule.IsSyncKey)
                    {
                        key_value_pairs += (key_value_pairs == string.Empty ? string.Empty : " AND ") + string.Format("[{0}] = @{0}", field.Name);
                    }
                    else
                    {
                        field_value_pairs += (field_value_pairs == string.Empty ? string.Empty : ", ") + string.Format("[{0}] = @{0}", field.Name);
                    }
                }
            }
            foreach (KeyValuePair<string, object> rule in defaults)
            {
                string field_name = rule.Key;
                field_value_pairs += (field_value_pairs == string.Empty ? string.Empty : ", ") + string.Format("[{0}] = @{0}", field_name);
            }
            if (string.IsNullOrWhiteSpace(field_value_pairs))
            {
                // возможно регистр сведений без ресурсов или реквизитов
                // (передложение SET команды UPDATE не содержит полей)
                // такой UPDATE не имеет смысла, просто делаем так, чтобы не было ошибок
                field_value_pairs = key_value_pairs.Replace(" AND ", ", ");
            }
            commands["U"] = string.Format(updateSQL, table, field_value_pairs, key_value_pairs);
        }
        private void BuildDeleteCommand(Table target)
        {
            string deleteSQL = "WITH CHANGE_TRACKING_CONTEXT (@change_tracking_context) DELETE {0} WHERE {1}";
            string key_value_pairs = string.Empty;
            string table = target.FullName;
            foreach (TranslationRule rule in subscription.TranslationRules)
            {
                if (!rule.IsSyncKey) continue;
                foreach (Field field in rule.TargetProperty.Fields)
                {
                    key_value_pairs += (key_value_pairs == string.Empty ? string.Empty : " AND ") + string.Format("[{0}] = @{0}", field.Name);
                }
            }
            commands["D"] = string.Format(deleteSQL, table, key_value_pairs);
        }
    }
}
